import { Request, Response } from "express";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import User from "../models/User";
import nodemailer from "nodemailer";
import dotenv from "dotenv";

dotenv.config();

const JWT_SECRET = process.env.JWT_SECRET || "secret123";

// Generate a random password (default 8 characters)
const generateRandomPassword = (length = 8) => {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let password = '';
  for (let i = 0; i < length; i++) {
    password += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return password;
};

// Email transporter setup
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

transporter.verify((error) => {
  if (error) {
    console.error("Email transporter error:", error);
  } else {
    console.log("Email server ready");
  }
});

//  REGISTER 
export const register = async (req: Request, res: Response) => {
  const { name, email, empCode, role } = req.body;

  try {
    // Validate empCode format
    if (!/^viskk\d{4}$/.test(empCode)) {
      return res.status(400).json({ message: "empCode must be in the format viskkXXXX" });
    }

    const empExists = await User.findOne({ empCode });
    if (empExists) {
      return res.status(400).json({ message: "empCode already taken" });
    }

    // Generate and hash password
    const tempPassword = generateRandomPassword();
    const hashedPassword = await bcrypt.hash(tempPassword, 10);

    // Create user
    const user = await User.create({
      name,
      email,
      empCode,
      role,
      password: hashedPassword,
    });

    // Send password via email
    const mailOptions = {
      from: `"VISKK Admin" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "Your Account - Autogenerated Password",
      text: `Hello ${name},

Welcome to our service! Your account has been created successfully.
Your password is: ${tempPassword}

You can log in using this password and change it later if you'd like.

Best regards,
VISKK Team`,
    };

    await transporter.sendMail(mailOptions);

    res.status(201).json({
      message: "User registered successfully. Please check your email for the password.",
    });
  } catch (error) {
    console.error("Registration error:", error);
    res.status(500).json({ message: "Server error, please try again" });
  }
};

//  LOGIN 
export const login = async (req: Request, res: Response) => {
  const { empCode, password } = req.body;

  try {
    const user = await User.findOne({ empCode });
    if (!user) {
      return res.status(401).json({ message: "Invalid credentials" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: "Invalid credentials" });
    }

    const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: "1d" });

    res.json({
      message: "Login successful",
      token,
      profile: {
        id: user._id,
        name: user.name,
        empCode: user.empCode,
        role: user.role,
        email: user.email,
      },
    });
  } catch (error) {
    console.error("Login error:", error);
    res.status(500).json({ message: "Server error, please try again" });
  }
};

//  UPDATE EMP CODE 
export const updateEmpCode = async (req: Request, res: Response) => {
  const { id } = req.params;
  const { empCode } = req.body;

  try {
    if (!/^viskk\d{4}$/.test(empCode)) {
      return res.status(400).json({ message: "empCode must be in the format viskkXXXX" });
    }

    const empExists = await User.findOne({ empCode });
    if (empExists) {
      return res.status(400).json({ message: "empCode already taken" });
    }

    const user = await User.findByIdAndUpdate(id, { empCode }, { new: true });
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    res.json({ message: "empCode updated successfully", user });
  } catch (error) {
    console.error("Update empCode error:", error);
    res.status(500).json({ message: "Server error, please try again" });
  }
};

//  CHANGE PASSWORD 
export const changePassword = async (req: Request, res: Response) => {
  const { empCode } = req.params;
  const { oldPassword, newPassword } = req.body;

  try {
    const user = await User.findOne({ empCode });
    if (!user) return res.status(404).json({ message: "User not found" });

    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) return res.status(400).json({ message: "Old password is incorrect" });

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    await user.save();

    res.json({ message: "Password updated successfully" });
  } catch (err) {
    console.error("Change password error:", err);
    res.status(500).json({ message: "Server error" });
  }
};

// GET PROFILE 
export const getUserProfile = async (req: Request, res: Response) => {
  const { empCode } = req.params;

  try {
    const user = await User.findOne({ empCode }).select("-password");
    if (!user) return res.status(404).json({ message: "User not found" });

    res.json({ user });
  } catch (err) {
    console.error("Get profile error:", err);
    res.status(500).json({ message: "Server error" });
  }
};
